grid.arrange(p1, p2, nrow = 2)
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = zipcode,
source = "stamen", data = kc_house)
grid.arrange(p1, p2, nrow = 2)
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = zipcode,
source = "stamen", data = kc_house) +
guides(color = FALSE)
grid.arrange(p1, p2, nrow = 2)
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = zipcode,
source = "stamen", data = kc_house) +
guides(color = FALSE)
p1
p2
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "watercolor", color = zipcode,
source = "stamen", data = kc_house) +
guides(color = FALSE)
p1
p2
qmplot(long, lat, maptype = "watercolor", color = zipcode,
data = kc_house) + guides(color = FALSE)
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = as.numeric(zipcode),
source = "stamen", data = kc_house) +
guides(color = FALSE)
p1
p2
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = zipcode,
source = "stamen", data = kc_house) +
guides(color = TRUE)
p1
p2
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = zipcode,
source = "stamen", data = kc_house) +
guides(color = FALSE)
p1
p2
# Import the dataset
kc_house <- read_csv("kc_house_data.csv")
# Check if there are any missing values
sapply(kc_house, function(x) sum(is.na(x)))
# Remove observations with NA values
kc_house <- na.omit(kc_house)
# Fit linear Regression on the train data
raw_mod <- lm(price ~ ., data = kc_house)
glance(raw_mod)
tidy_data <- kc_house %>%
mutate(waterfront = as.factor(waterfront)) %>%
mutate(view = as.factor(view)) %>%
mutate(condition = as.factor(condition)) %>%
mutate(grade = as.factor(grade)) %>%
mutate(age = as.numeric(format(date, format="%Y")) - yr_built) %>%
mutate(zipcode = as.factor(zipcode)) %>%
select(-id, -date)
head(tidy_data, 5)
p1 <- ggplot(tidy_data, aes(x = price)) +
geom_density(fill = "darkgreen") +
labs(title = "Plot 1: Distribution of House Price") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(tidy_data, aes(x = log(price))) +
geom_density(fill = "darkgreen") +
labs(title = "Plot 2: Distribution of Log House Price") +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(p1, p2, nrow=2)
cat_features <- names(tidy_data)[sapply(tidy_data, is.factor)]
for (i in 1:(length(cat_features) - 1)) {
p1 <- tidy_data %>%
group_by(get(cat_features[i])) %>%
summarize(count = n()) %>%
mutate(percent = count/sum(count)) %>%
ggplot(aes(x = `get(cat_features[i])`, y = count)) +
geom_col(color = 'lightblue', fill = 'lightblue') +
xlab("") +
geom_text(aes(label = paste0(round(100 * percent, 1), "%")),
position = position_stack(vjust = 0.5),
size = 4) +
labs(title = paste("Distribution of", cat_features[i])) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(tidy_data, aes(x = get(cat_features[i]), y = price)) +
geom_boxplot(color = "black") +
stat_summary(fun = mean, color = "red", geom = "point") +
xlab(cat_features[i])
grid.arrange(p1, p2, nrow = 2)
}
# Since there are too many zipcodes, I only show top 15 zipcodes that have the most houses
p1 <- tidy_data %>%
group_by(zipcode) %>%
summarize(count = n()) %>%
arrange(-count) %>%
mutate(rank = min_rank(-count)) %>%
mutate(percent = count/sum(count)) %>%
filter(rank <= 15) %>%
ggplot(aes(x = zipcode, y = count)) +
geom_col(color = 'lightblue', fill = 'lightblue') +
xlab("zipcode") +
geom_text(aes(label = paste0(round(100 * percent, 1), "%")),
position = position_stack(vjust = 0.75),
size = 4) +
labs(title = "Distribution of Top 15 Zipcode with the Most Houses") +
theme(plot.title = element_text(hjust = 0.5, size = 8)) +
coord_flip()
p2 <- tidy_data %>%
group_by(zipcode) %>%
summarize(count = n()) %>%
mutate(rank = min_rank(-count)) %>%
mutate(percent = count/sum(count)) %>%
ungroup() %>%
right_join(tidy_data) %>%
filter(rank <= 15) %>%
ggplot(aes(x = zipcode, y = price)) +
geom_boxplot(color = "black") +
stat_summary(fun = mean, color = "red", geom = "point") +
xlab("") +
labs(title = "Distribution of Top 15 Zipcode with the Most Houses") +
theme(plot.title = element_text(hjust = 0.5, size = 8)) +
coord_flip()
grid.arrange(p1, p2, ncol = 2)
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = zipcode,
source = "stamen", data = kc_house) +
guides(color = FALSE)
p1
p2
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = zipcode,
source = "stamen", data = kc_house) +
scale_colour_viridis_d() +
guides(color = FALSE)
p1
p2
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = as.fator(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d() +
guides(color = FALSE)
p1
p2
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d() +
guides(color = FALSE)
p2
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d(aesthetics = c("colour", "fill")) +
guides(color = FALSE)
p2
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d(aesthetics = c("colour", "fill")) +
guides(color = FALSE)
p2
p1
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d(aesthetics = c("colour")) +
guides(color = FALSE)
p2
p1
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d(aesthetics = c("colour"), option = "plasma") +
guides(color = FALSE)
p2
p1
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d(aesthetics = c("colour"), option = "inferno") +
guides(color = FALSE)
p2
p1
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d(option = "inferno") +
guides(color = FALSE)
p2
p1
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d(option = "magma") +
guides(color = FALSE)
p2
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d(option = "cividis") +
guides(color = FALSE)
p2
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d(option = "D") +
guides(color = FALSE)
p2
p1 <- qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
p2 <- qmplot(long, lat, maptype = "terrain", color = as.factor(zipcode),
source = "stamen", data = kc_house) +
scale_colour_viridis_d(option = "B") +
guides(color = FALSE)
p2
p1
qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
ggcorr(data = select(tidy_data, -all_of(cat_features)), size = 2, hjust = 0.75,
method = c("pairwise.complete.obs", "pearson"),
label = TRUE, label_size = 4)
features <- c("lat", "long", 'yr_built', 'yr_renovated', 'age', "floors", "sqft_basement")
for (i in 1:(length(features))) {
p1 <- tidy_data %>%
ggplot(aes(x = get(features[i]))) +
geom_density(fill = "lightblue") +
xlab("") +
labs(title = paste("Distribution of", features[i])) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(tidy_data, aes(x = get(features[i]), y = price)) +
geom_point(color = "lightblue") +
xlab(features[i])
grid.arrange(p1, p2, nrow = 2)
}
# Count how many houses don't have basements
no_basement_ratio <- sum(as.numeric(tidy_data$sqft_basement == 0)) / nrow(tidy_data)
library(tidyverse)
library(ggmap)
library(gridExtra)
library(corrplot)
library(GGally)
library(broom)
library(caret)
library(glmnet)
# Import the dataset
kc_house <- read_csv("kc_house_data.csv")
# Check if there are any missing values
sapply(kc_house, function(x) sum(is.na(x)))
# Remove observations with NA values
kc_house <- na.omit(kc_house)
# Fit linear Regression on the train data
raw_mod <- lm(price ~ ., data = kc_house)
glance(raw_mod)
tidy_data <- kc_house %>%
mutate(waterfront = as.factor(waterfront)) %>%
mutate(view = as.factor(view)) %>%
mutate(condition = as.factor(condition)) %>%
mutate(grade = as.factor(grade)) %>%
mutate(age = as.numeric(format(date, format="%Y")) - yr_built) %>%
mutate(zipcode = as.factor(zipcode)) %>%
select(-id, -date)
head(tidy_data, 5)
p1 <- ggplot(tidy_data, aes(x = price)) +
geom_density(fill = "darkgreen") +
labs(title = "Plot 1: Distribution of House Price") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(tidy_data, aes(x = log(price))) +
geom_density(fill = "darkgreen") +
labs(title = "Plot 2: Distribution of Log House Price") +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(p1, p2, nrow=2)
cat_features <- names(tidy_data)[sapply(tidy_data, is.factor)]
for (i in 1:(length(cat_features) - 1)) {
p1 <- tidy_data %>%
group_by(get(cat_features[i])) %>%
summarize(count = n()) %>%
mutate(percent = count/sum(count)) %>%
ggplot(aes(x = `get(cat_features[i])`, y = count)) +
geom_col(color = 'lightblue', fill = 'lightblue') +
xlab("") +
geom_text(aes(label = paste0(round(100 * percent, 1), "%")),
position = position_stack(vjust = 0.5),
size = 4) +
labs(title = paste("Distribution of", cat_features[i])) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(tidy_data, aes(x = get(cat_features[i]), y = price)) +
geom_boxplot(color = "black") +
stat_summary(fun = mean, color = "red", geom = "point") +
xlab(cat_features[i])
grid.arrange(p1, p2, nrow = 2)
}
# Since there are too many zipcodes, I only show top 15 zipcodes that have the most houses
p1 <- tidy_data %>%
group_by(zipcode) %>%
summarize(count = n()) %>%
arrange(-count) %>%
mutate(rank = min_rank(-count)) %>%
mutate(percent = count/sum(count)) %>%
filter(rank <= 15) %>%
ggplot(aes(x = zipcode, y = count)) +
geom_col(color = 'lightblue', fill = 'lightblue') +
xlab("zipcode") +
geom_text(aes(label = paste0(round(100 * percent, 1), "%")),
position = position_stack(vjust = 0.75),
size = 4) +
labs(title = "Distribution of Top 15 Zipcode with the Most Houses") +
theme(plot.title = element_text(hjust = 0.5, size = 8)) +
coord_flip()
p2 <- tidy_data %>%
group_by(zipcode) %>%
summarize(count = n()) %>%
mutate(rank = min_rank(-count)) %>%
mutate(percent = count/sum(count)) %>%
ungroup() %>%
right_join(tidy_data) %>%
filter(rank <= 15) %>%
ggplot(aes(x = zipcode, y = price)) +
geom_boxplot(color = "black") +
stat_summary(fun = mean, color = "red", geom = "point") +
xlab("") +
labs(title = "Distribution of Top 15 Zipcode with the Most Houses") +
theme(plot.title = element_text(hjust = 0.5, size = 8)) +
coord_flip()
grid.arrange(p1, p2, ncol = 2)
ggcorr(data = select(tidy_data, -all_of(cat_features)), size = 2, hjust = 0.75,
method = c("pairwise.complete.obs", "pearson"),
label = TRUE, label_size = 4)
features <- c("lat", "long", 'yr_built', 'yr_renovated', 'age', "floors", "sqft_basement")
for (i in 1:(length(features))) {
p1 <- tidy_data %>%
ggplot(aes(x = get(features[i]))) +
geom_density(fill = "lightblue") +
xlab("") +
labs(title = paste("Distribution of", features[i])) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(tidy_data, aes(x = get(features[i]), y = price)) +
geom_point(color = "lightblue") +
xlab(features[i])
grid.arrange(p1, p2, nrow = 2)
}
# Count how many houses don't have basements
no_basement_ratio <- sum(as.numeric(tidy_data$sqft_basement == 0)) / nrow(tidy_data)
# Add new variables to tidy_data: renovated, basement
tidy_data <- tidy_data %>%
mutate(renovated = as.factor(as.numeric(yr_renovated != 0))) %>%
mutate(basement = as.factor(as.numeric(sqft_basement != 0))) %>%
select(-sqft_basement)
# All the features of the final model
features <- names(tidy_data %>% select(-price))
library(tidyverse)
library(ggmap)
library(gridExtra)
library(corrplot)
library(GGally)
library(broom)
library(caret)
library(glmnet)
# Import the dataset
kc_house <- read_csv("kc_house_data.csv")
# Check if there are any missing values
sapply(kc_house, function(x) sum(is.na(x)))
# Remove observations with NA values
kc_house <- na.omit(kc_house)
# Fit linear Regression on the train data
raw_mod <- lm(price ~ ., data = kc_house)
glance(raw_mod)
tidy_data <- kc_house %>%
mutate(waterfront = as.factor(waterfront)) %>%
mutate(view = as.factor(view)) %>%
mutate(condition = as.factor(condition)) %>%
mutate(grade = as.factor(grade)) %>%
mutate(age = as.numeric(format(date, format="%Y")) - yr_built) %>%
mutate(zipcode = as.factor(zipcode)) %>%
select(-id, -date)
head(tidy_data, 5)
p1 <- ggplot(tidy_data, aes(x = price)) +
geom_density(fill = "darkgreen") +
labs(title = "Plot 1: Distribution of House Price") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(tidy_data, aes(x = log(price))) +
geom_density(fill = "darkgreen") +
labs(title = "Plot 2: Distribution of Log House Price") +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(p1, p2, nrow=2)
cat_features <- names(tidy_data)[sapply(tidy_data, is.factor)]
for (i in 1:(length(cat_features) - 1)) {
p1 <- tidy_data %>%
group_by(get(cat_features[i])) %>%
summarize(count = n()) %>%
mutate(percent = count/sum(count)) %>%
ggplot(aes(x = `get(cat_features[i])`, y = count)) +
geom_col(color = 'lightblue', fill = 'lightblue') +
xlab("") +
geom_text(aes(label = paste0(round(100 * percent, 1), "%")),
position = position_stack(vjust = 0.5),
size = 4) +
labs(title = paste("Distribution of", cat_features[i])) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(tidy_data, aes(x = get(cat_features[i]), y = price)) +
geom_boxplot(color = "black") +
stat_summary(fun = mean, color = "red", geom = "point") +
xlab(cat_features[i])
grid.arrange(p1, p2, nrow = 2)
}
# Since there are too many zipcodes, I only show top 15 zipcodes that have the most houses
p1 <- tidy_data %>%
group_by(zipcode) %>%
summarize(count = n()) %>%
arrange(-count) %>%
mutate(rank = min_rank(-count)) %>%
mutate(percent = count/sum(count)) %>%
filter(rank <= 15) %>%
ggplot(aes(x = zipcode, y = count)) +
geom_col(color = 'lightblue', fill = 'lightblue') +
xlab("zipcode") +
geom_text(aes(label = paste0(round(100 * percent, 1), "%")),
position = position_stack(vjust = 0.75),
size = 4) +
labs(title = "Distribution of Top 15 Zipcode with the Most Houses") +
theme(plot.title = element_text(hjust = 0.5, size = 8)) +
coord_flip()
p2 <- tidy_data %>%
group_by(zipcode) %>%
summarize(count = n()) %>%
mutate(rank = min_rank(-count)) %>%
mutate(percent = count/sum(count)) %>%
ungroup() %>%
right_join(tidy_data) %>%
filter(rank <= 15) %>%
ggplot(aes(x = zipcode, y = price)) +
geom_boxplot(color = "black") +
stat_summary(fun = mean, color = "red", geom = "point") +
xlab("") +
labs(title = "Distribution of Top 15 Zipcode with the Most Houses") +
theme(plot.title = element_text(hjust = 0.5, size = 8)) +
coord_flip()
grid.arrange(p1, p2, ncol = 2)
ggcorr(data = select(tidy_data, -all_of(cat_features)), size = 2, hjust = 0.75,
method = c("pairwise.complete.obs", "pearson"),
label = TRUE, label_size = 4)
features <- c("lat", "long", 'yr_built', 'yr_renovated', 'age', "floors", "sqft_basement")
for (i in 1:(length(features))) {
p1 <- tidy_data %>%
ggplot(aes(x = get(features[i]))) +
geom_density(fill = "lightblue") +
xlab("") +
labs(title = paste("Distribution of", features[i])) +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(tidy_data, aes(x = get(features[i]), y = price)) +
geom_point(color = "lightblue") +
xlab(features[i])
grid.arrange(p1, p2, nrow = 2)
}
# Count how many houses don't have basements
no_basement_ratio <- sum(as.numeric(tidy_data$sqft_basement == 0)) / nrow(tidy_data)
qmplot(long, lat, maptype = "terrain", color = log(price),
source = "stamen", data = kc_house) +
scale_colour_viridis_c()
# Add new variables to tidy_data: renovated, basement
tidy_data <- tidy_data %>%
mutate(renovated = as.factor(as.numeric(yr_renovated != 0))) %>%
mutate(basement = as.factor(as.numeric(sqft_basement != 0))) %>%
select(-sqft_basement)
# All the features of the final model
features <- names(tidy_data %>% select(-price))
final_mod <- lm(price ~., data = tidy_data)
glance(final_mod)
improve_rate <-
( as.numeric(glance(final_mod)$r.squared) - as.numeric(glance(raw_mod)$r.squared) )  / as.numeric(glance(raw_mod)$r.squared)
final_log_mod <- lm(log(price) ~., data = tidy_data)
glance(final_log_mod)
improve_rate_log <-
( as.numeric(glance(final_log_mod)$r.squared) - as.numeric(glance(raw_mod)$r.squared) )  / as.numeric(glance(raw_mod)$r.squared)
null_mod = lm(log(price) ~ 1, tidy_data)
full_mod = lm(log(price) ~. , tidy_data)
forward_mod = step(null_mod, scope = list(lower = ~1, upper = full_mod),
k = log(nrow(tidy_data)), direction = "forward", trace = FALSE)
glance(forward_mod)
diff <- setdiff(tidy(final_mod)$term, tidy(forward_mod)$term)
backward_mod = step(full_mod, scope = list(lower = ~1, upper = full_mod),
k = log(nrow(tidy_data)), direction = "backward", trace = FALSE)
glance(backward_mod)
diff <- setdiff(tidy(final_mod)$term, tidy(backward_mod)$term)
